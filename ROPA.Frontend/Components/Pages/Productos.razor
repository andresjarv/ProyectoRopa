@page "/productos"
@using ROPA.Frontend.Models
@using ROPA.Frontend.Services
@inject IProductoService productoService

<h3>Productos</h3>

@if (productos == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Precio</th>
                <th>Stock</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in productos)
            {
                <tr>
                    <td>@p.Nombre</td>
                    <td>@p.Precio</td>
                    <td>@p.Stock</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => Editar(p)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => Eliminar(p.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h4>@(esEditar ? "Editar Producto" : "Nuevo Producto")</h4>
<EditForm Model="@modelo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Nombre</label>
        <InputText class="form-control" @bind-Value="modelo.Nombre" />
    </div>
    <div class="mb-3">
        <label>Precio</label>
        <InputNumber class="form-control" @bind-Value="modelo.Precio" />
    </div>
    <div class="mb-3">
        <label>Stock</label>
        <InputNumber class="form-control" @bind-Value="modelo.Stock" />
    </div>

    <button class="btn btn-success" type="submit">Guardar</button>
    <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
</EditForm>

@code {
    private List<Producto> productos;
    private Producto modelo = new();
    private bool esEditar = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    async Task CargarProductos()
    {
        productos = await productoService.ObtenerProductos();
    }

    void Editar(Producto producto)
    {
        modelo = new Producto
            {
                Id = producto.Id,
                Nombre = producto.Nombre,
                Precio = producto.Precio,
                Stock = producto.Stock
            };
        esEditar = true;
    }

    async Task Eliminar(int id)
    {
        await productoService.EliminarProducto(id);
        await CargarProductos();
    }

    async Task Guardar()
    {
        if (esEditar)
        {
            await productoService.ActualizarProducto(modelo);
        }
        else
        {
            await productoService.CrearProducto(modelo);
        }

        modelo = new Producto();
        esEditar = false;
        await CargarProductos();
    }

    void Cancelar()
    {
        modelo = new Producto();
        esEditar = false;
    }
}